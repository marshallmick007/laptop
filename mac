#!/usr/bin/env bash
### end common-components/bash-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

# [mm] changed ~/.bin to ~/bin
if [[ ! -d "$HOME/bin/" ]]; then
  mkdir "$HOME/bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch $HOME/.zshrc
fi

if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
  printf 'export PATH="$HOME/bin:$PATH"\n' >> ~/.zshrc
  export PATH="$HOME/bin:$PATH"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)
### end common-components/zsh

brew_install_or_upgrade() {
  if brew list -1 | grep -Fqx "$1"; then
    (brew upgrade "$@") || true
  else
    brew install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew cask list -1 | grep -Fqx "$1"; then
    (brew upgrade "$@") || true
  else
    brew cask install "$@"
  fi
}
### end mac-components/mac-functions

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

if ! command -v brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/homebrew/go/install)

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      printf '\n# recommended by brew doctor\n' >> ~/.zshrc
      printf 'export PATH="/usr/local/bin:$PATH"\n' >> ~/.zshrc
      export PATH="/usr/local/bin:$PATH"
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Tapping php..."
brew tap homebrew/dupes
brew tap homebrew/versions
brew tap homebrew/homebrew-php

fancy_echo "Tapping cask..."
brew tap caskroom/cask

fancy_echo "Installing Brew Cask"
brew_install_or_upgrade brew-cask

fancy_echo "Updating Homebrew formulas ..."
brew update

### end mac-components/homebrew

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'macvim'

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew_install_or_upgrade 'ctags'

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew_install_or_upgrade 'tmux'

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew_install_or_upgrade 'reattach-to-user-namespace'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing mysql ..."
  brew_install_or_upgrade 'mysql'

fancy_echo "Installing gd"
  brew_install_or_upgrade 'gd'

fancy_echo "Installing php ..."
  brew_install_or_upgrade 'php54' '--without-apache --with-fpm --with-mysql'
#  if brew list -1 | grep -Fqx "php"; then
#    (brew upgrade --without-apache --with-fpm --with-mysql php54) || true
#  else
#    brew install --without-apache --with-fpm --with-mysql php54
#  fi



fancy_echo "Installing nginx ..."
  brew_install_or_upgrade 'nginx'

fancy_echo "Installing ack ..."
  brew_install_or_upgrade 'ack'

fancy_echo "Installing tree ..."
  brew_install_or_upgrade 'tree'

fancy_echo "Installing htop ..."
  brew_install_or_upgrade 'htop-osx'

fancy_echo "Installing unrar ..."
  brew_install_or_upgrade 'unrar'

fancy_echo "Installing wget ..."
  brew_install_or_upgrade 'wget'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew_install_or_upgrade 'watch'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew_install_or_upgrade 'gpg'

node_version="0.10.28"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ..."
  brew_install_or_upgrade 'nvm'

  if ! grep -qs 'source $(brew --prefix nvm)/nvm.sh' ~/.zshrc; then
    printf 'export PATH="$PATH:/usr/local/lib/node_modules"\n' >> ~/.zshrc
    printf 'source $(brew --prefix nvm)/nvm.sh\n' >> ~/.zshrc
  fi

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"


fancy_echo "Installing Casks..."
fancy_echo "Installing alfred..."
brew_cask_install_or_upgrade alfred
fancy_echo "Installing caffeine..."
brew_cask_install_or_upgrade caffeine
fancy_echo "Installing day-o..."
brew_cask_install_or_upgrade day-o
fancy_echo "Installing dropbox..."
brew_cask_install_or_upgrade dropbox
fancy_echo "Installing evernote..."
brew_cask_install_or_upgrade evernote
fancy_echo "Installing hive..."
brew_cask_install_or_upgrade hive
fancy_echo "Installing iterm2..."
brew_cask_install_or_upgrade iterm2
fancy_echo "Installing nvalt..."
brew_cask_install_or_upgrade nvalt
fancy_echo "Installing sequel-pro..."
brew_cask_install_or_upgrade sequel-pro
fancy_echo "Installing teamviewer..."
brew_cask_install_or_upgrade teamviewer
fancy_echo "Installing transmission..."
brew_cask_install_or_upgrade transmission
fancy_echo "Installing vlc..."
brew_cask_install_or_upgrade vlc
### end mac-components/packages

# [mm] - do not start postgres (not installed yet)
#fancy_echo "Starting Postgres ..."
#  brew services restart postgresql
### end mac-components/start-services

fancy_echo "Installing rbenv, to change Ruby versions ..."
  brew_install_or_upgrade 'rbenv'

  if ! grep -qs "rbenv init" ~/.zshrc; then
    printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.zshrc
    printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.zshrc

    fancy_echo "Enable shims and autocompletion ..."
      eval "$(rbenv init -)"
  fi

  export PATH="$HOME/.rbenv/bin:$PATH"

fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  brew_install_or_upgrade 'rbenv-gem-rehash'

fancy_echo "Installing ruby-build, to install Rubies ..."
  brew_install_or_upgrade 'ruby-build'
### end mac-components/rbenv

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew link openssl --force
### end mac-components/compiler-and-libraries

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Installing Unicorn"
  gem install unicorn --no-document --no-ri

fancy_echo "Installing Rake"
  gem install rake --no-document --no-ri

fancy_echo "Installing Rack"
  gem install rack --no-document --no-ri

fancy_echo "Installing Sinatra"
  gem install sinatra --no-document --no-ri
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
### end mac-components/bundler

fancy_echo "Installing Suspenders, thoughtbot's Rails template ..."
  gem install suspenders --no-document
### end common-components/default-gems

# fancy_echo "Installing Heroku CLI client ..."
#  brew_install_or_upgrade 'heroku-toolbelt'

#fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
#  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

#fancy_echo "Installing GitHub CLI client ..."
#  brew_install_or_upgrade 'hub'
### end mac-components/github

if ! command -v rcup &>/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. Skipping ..."
fi
### end mac-components/rcm

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

